개발 환경:
Spring Boot Web
Eclipse
Java 17
H2

==== 사전 설명 ====

질의/조회가 추가/삭제보다 월등이 많다는 점에 초점을 맞춰서 설계했습니다.

질의에는 단어와 연관단어쌍과 관련된 것들이 있습니다.
그래서 단어와 연관쌍을 어떻게 빠르게 조회할까를 고민했습니다.
그래서 첫째, 단어에 대한 검색을 위해서는 단어들을 저장하는 테이블이 필요하다 생각했습니다.
하지만 단어 개수가 n개이면 단어쌍은 n^2이 된다는 점 때문에 조회할때마다 단어쌍을 조합해보는것은 효율성이 떨어진다 생각했습니다.
그래서 단어쌍도 테일블에 보관해놓는게 가장 좋을것이란 생각을했습니다.
위 생각을 이루기 위해 만든 구성은 다음과 같습니다.

다음과 같은 테이블들이 있습니다.

Book
---------------------
| name  | type   | desc
---------------------------
| id    | long   | 
| title | string | 책의 제목
| isbn  | string |

RelGroup
---------------------------------------------------------
| name       | type   | desc
-----------------------------------------------------
| id         | long   |
|firstletter | string | 연관그룹의 첫 글자
|filled      | bool   | 그룹에 10개의 단어가 있으면 true

Word
---------------------------------------------------------
| name   | type   | desc
-----------------------------------------------------
| id     | long   |
|wordval | string | 단어값
|count   | long   | 단어의 등장횟수

Word2
---------------------------------------------------------
| name   | type   | desc
-----------------------------------------------------
| id     | long   |
|wordval | string | 단어값
|count   | long   | 연관단어쌍의 갯수


위 테이블들 외에도 ManyToMany 관계를 위한 테이블들이 있으며 관계들은 아래와 같습니다.

One <-------> Many
Book          RelGroup

Many <------> Many
RelGroup      Word

Many <------> Many
RelGroup      Word2

One <-------> Many
Word          Word2

Word 테이블은 wordval가 unique하지만 Word2 테이블은 wordval가 unique하지 않습니다.

특정 단어가 포함된 연관그룹들을 찾고 싶을때는 Word에서 해당 단어를 찾고 ManyToMany 매핑 테이블에서 매칭된 연관그룹들을 다 불러올 수 있습니다.

특정 단어쌍 <w1,w2>이 포함된 연관그룹을 찾고 싶을때는 <w1,w2>과 <w2,w1>의 두 방향을 찾아봐서 매칭되는 연관그룹을 불러올 수 있습니다.
<w1,w2>란 w1이 Word에 포함되는지 살피고 w2가 Word2에 포함되는지 살피는겁니다. 테이블에는 <w1,w2>와 <w2,w1>이 둘 다 보관되지 않고 둘 중 하나만 보관하도록 설계가 되어있습니다.


단어 보관 예제는 다음과 같습니다.
Book1에 animal, apple, ace 단어들이 포함 된다 합시다.

그럼 이 단어들이 어떤 순이 추가되는지 설명드립니다.

1. animal이 추가될때
그룹(b1_a)에 아무 단어가 없습니다. 아래와 같이 Word에 추가되고 그 단어와 매핑되는 Word2는 없습니다

Word        | Word2
------------|---------
animal
(b1_a)


2. apple이 추가될때
그룹(b1_a)에 단어 animal이 있습니다. b1_a에 <apple, animal> 쌍을 만듭니다

Word        | Word2
------------|---------
1. animal
(b1_a)

2. apple------animal
(b1_a)        (b1_a)


2. ace가 추가될때
그룹(b1_a)에 단어들이 있습니다. b1_a에 존재하는 모든 단어 w와 <ace, w> 쌍을 만듭니다.
그 단어쌍들은 <ace,animal>, <ace,apple>입니다

Word        | Word2
------------|---------
1. animal
(b1_a)

2. apple------animal
(b1_a)        (b1_a)

3. ace--------animal
(b1_a) |      (b1_a)
       |------apple
              (b1_a)


이렇게 보관하면 모든 쌍들이 보관되며 <앞,뒤> <뒤,앞> 순서 중 하나만 보관됩니다.

여기서 추가적으로 다른책에서 중복된 단어들이 추가될때를 설명 드리겠습니다.
위에 Book1이 추가되었고 Book2도 추가하려고합니다.
Book2에 animal, apple, ace을 포함합니다.

1. animal이 추가될때
그룹(b2_a)에 아무 단어가 없습니다. 그래서 단어와 매핑되는 Word2는 없습니다.
animal이 Word에 이미 존재합니다. wordval 옆의 괄호는 그 단어의 등장횟수를 나타내겠습니다.

Word         | Word2
-------------|---------
1.animal(2)
(b1_a, b2_a)

2. apple(1)----animal(1)
(b1_a)         (b1_a)

3. ace(1)------animal(1)
(b1_a) |       (b1_a)
       |-------apple(1)
               (b1_a)



2. apple이 추가될때
그룹(b2_a)에 단어가 있습니다. b2_a에 존재하는 모든 단어와 <apple, w> 쌍을 만듭니다
<apple,animal> 쌍에 대해서 <apple, animal> 또는 <animal, apple>이 존재하는지 확인합니다.
있으면 Word2에서 단어쌍의 횟수를 증가합니다.

Word         | Word2
-------------|---------
1. animal(2)
(b1_a, b2_a)

2. apple(2)----animal(2)
(b1_a,b2_a)    (b1_a,b2_a)

3. ace(1)------animal(1)
(b1_a) |       (b1_a)
       |-------apple(1)
               (b1_a)



3. ace가 추가될때
그룹(b2_a)에 단어들이 있습니다. b2_a에 존재하는 모든 단어와 <ace, w> 쌍을 만듭니다
생성되는 단어쌍은 <ace, animal> <ace, apple>.
이것도 역시 순서 바꾸면서 존재하는지 확인합니다.

Word           | Word2
---------------|---------
1. animal(2)
(b1_a, b2_a)

2. apple(2)-------animal(2)
(b1_a,b2_a)       (b1_a,b2_a)

3. ace(2)---------animal(2)
(b1_a,b2_a)|      (b1_a,b2_a)
           |-------apple(2)
                   (b1_a,b2_a)

위와 같이 이미 <앞,뒤> 또는 <뒤,앞>에 대해서 쌍이 존해하는지 확인하고 그런 쌍이 없어야만 새로운 쌍을 만들기 때문에 <앞,뒤> 와 <뒤,앞> 이 둘 다 만들어지는 경우가 없습니다. 

이렇게 구성 됐을때 단어 등장횟수 top10을 구하고자하면 Word에서 count top10을 리턴하면됩니다.
연관단어쌍 횟수 top10을 구하고자하면 Word2에서 count top10을 리턴하면됩니다.


=== 요구 사항 설명 ====

1. 사용자로부터 입력받은 검색어로 도서정보 검색 후 데이터를 수집하는 API를 구현한다.

구현한 API는 다음과 같습니다

GET /book/collect

Param:
query


2. 두 개의 단어를 입력 받고, 해당 단어들로 연관관계를 가지고 있는 도서의 목록을 출력 한다.

구현한 API는 다음과 같습니다

GET /book/wordpair

Param:
w1 : 단어1
w2 : 단어2


3. 가장 많이 연관 된 단어쌍 TOP10과, 연관관계를 가지고 있는 도서의 목록을 함께 출력 한다.

구현한 API는 다음과 같습니다

GET /book/toprel


4. 등장 횟수가 가장 많은 단어 TOP10과, 연관 된 단어들의 목록을 등장 횟수와 함께 출력 한다.

구현한 API는 다음과 같습니다

GET /book/topcount


5. 도서 제목의 일부분을 입력값으로 조회하면, 해당 도서에서 추출 된 단어들의 목록을 출력한다.

구현한 API는 다음과 같습니다

GET /book/words

Params:
title
type
page 
size

normal과 slice를 분리하기 위해 Filter를 사용해서 분리하였습니다.

6. 특정 도서에 대한 상세 정보를 출력한다. 

구현한 API는 다음과 같습니다

GET /book

Params:
isbn


7. 특정 도서 내에 새로운 단어를 추가할 수 있는 API를 제공한다. 

구현한 API는 다음과 같습니다

POST /book

Params:
isbn
word

8. 특정 도서 내의 단어를 제거할 수 있는 API를 제공한다.

구현한 API는 다음과 같습니다

DELETE /book

Params:
isbn
word


