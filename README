개발 환경:
Spring Boot Web
Eclipse
Java 17
H2

==== 사전 설명 ====

질의/조회가 추가/삭제보다 월등이 많다는 점에 초점을 맞춰서 설계했습니다.

질의에는 단어와 연관단어쌍과 관련된 것들이 있습니다.
그래서 단어와 연관쌍을 어떻게 빠르게 조회할까를 고민했습니다.
그래서 첫째, 단어에 대한 검색을 위해서는 단어들을 저장하는 테이블이 필요하다 생각했습니다.
하지만 단어 개수가 n개이면 단어쌍은 n^2이 된다는 점 때문에 조회할때마다 단어쌍을 조합해보는것은 효율성이 떨어진다 생각했습니다.
그래서 단어쌍도 테일블에 보관해놓는게 가장 좋을것이란 생각을했습니다.
위 생각을 이루기 위해 만든 구성은 다음과 같습니다.

다음과 같은 테이블들이 있습니다.

Book
---------------------
| name  | type   | desc
---------------------------
| id    | long   | 
| title | string | 책의 제목
| isbn  | string |

RelGroup
---------------------------------------------------------
| name       | type   | desc
-----------------------------------------------------
| id         | long   |
|firstletter | string | 연관그룹의 첫 글자
|filled      | bool   | 그룹에 10개의 단어가 있으면 true

Word
---------------------------------------------------------
| name   | type   | desc
-----------------------------------------------------
| id     | long   |
|wordval | string | 단어값
|count   | long   | 단어의 등장횟수

Word2
---------------------------------------------------------
| name   | type   | desc
-----------------------------------------------------
| id     | long   |
|wordval | string | 단어값
|count   | long   | 연관단어쌍의 갯수


위 테이블들 외에도 ManyToMany 관계를 위한 테이블들이 있으며 관계들은 아래와 같습니다.

One <-------> Many
Book          RelGroup

Many <------> Many
RelGroup      Word

Many <------> Many
RelGroup      Word2

One <-------> Many
Word          Word2

Word 테이블은 wordval가 unique하지만 Word2 테이블은 wordval가 unique하지 않습니다.

특정 단어가 포함된 연관그룹들을 찾고 싶을때는 Word에서 해당 단어를 찾고 ManyToMany 매핑 테이블에서 매칭된 연관그룹들을 다 불러올 수 있습니다.

특정 단어쌍 <w1,w2>이 포함된 연관그룹을 찾고 싶을때는 <w1,w2>과 <w2,w1>의 두 방향을 찾아봐서 매칭되는 연관그룹을 불러올 수 있습니다.
<w1,w2>란 w1이 Word에 포함되는지 살피고 w2가 Word2에 포함되는지 살피는겁니다. 테이블에는 <w1,w2>와 <w2,w1>이 둘 다 보관되지 않고 둘 중 하나만 보관하도록 설계가 되어있습니다.


단어 보관 예제는 다음과 같습니다.
Book1에 animal, apple, ace 단어들이 포함 된다 합시다.

그럼 이 단어들이 어떤 순이 추가되는지 설명드립니다.

1. animal이 추가될때
그룹(b1_a)에 아무 단어가 없습니다. 아래와 같이 Word에 추가되고 그 단어와 매핑되는 Word2는 없습니다

Word        | Word2
------------|---------
animal
(b1_a)


2. apple이 추가될때
그룹(b1_a)에 단어 animal이 있습니다. b1_a에 <apple, animal> 쌍을 만듭니다

Word        | Word2
------------|---------
1. animal
(b1_a)

2. apple------animal
(b1_a)        (b1_a)


2. ace가 추가될때
그룹(b1_a)에 단어들이 있습니다. b1_a에 존재하는 모든 단어 w와 <ace, w> 쌍을 만듭니다.
그 단어쌍들은 <ace,animal>, <ace,apple>입니다

Word        | Word2
------------|---------
1. animal
(b1_a)

2. apple------animal
(b1_a)        (b1_a)

3. ace--------animal
(b1_a) |      (b1_a)
       |------apple
              (b1_a)


이렇게 보관하면 모든 쌍들이 보관되며 <앞,뒤> <뒤,앞> 순서 중 하나만 보관됩니다.

여기서 추가적으로 다른책에서 중복된 단어들이 추가될때를 설명 드리겠습니다.
위에 Book1이 추가되었고 Book2도 추가하려고합니다.
Book2에 animal, apple, ace을 포함합니다.

1. animal이 추가될때
그룹(b2_a)에 아무 단어가 없습니다. 그래서 단어와 매핑되는 Word2는 없습니다.
animal이 Word에 이미 존재합니다. wordval 옆의 괄호는 그 단어의 등장횟수를 나타내겠습니다.

Word         | Word2
-------------|---------
1.animal(2)
(b1_a, b2_a)

2. apple(1)----animal(1)
(b1_a)         (b1_a)

3. ace(1)------animal(1)
(b1_a) |       (b1_a)
       |-------apple(1)
               (b1_a)



2. apple이 추가될때
그룹(b2_a)에 단어가 있습니다. b2_a에 존재하는 모든 단어와 <apple, w> 쌍을 만듭니다
<apple,animal> 쌍에 대해서 <apple, animal> 또는 <animal, apple>이 존재하는지 확인합니다.
있으면 Word2에서 단어쌍의 횟수를 증가합니다.

Word         | Word2
-------------|---------
1. animal(2)
(b1_a, b2_a)

2. apple(2)----animal(2)
(b1_a,b2_a)    (b1_a,b2_a)

3. ace(1)------animal(1)
(b1_a) |       (b1_a)
       |-------apple(1)
               (b1_a)



3. ace가 추가될때
그룹(b2_a)에 단어들이 있습니다. b2_a에 존재하는 모든 단어와 <ace, w> 쌍을 만듭니다
생성되는 단어쌍은 <ace, animal> <ace, apple>.
이것도 역시 순서 바꾸면서 존재하는지 확인합니다.

Word           | Word2
---------------|---------
1. animal(2)
(b1_a, b2_a)

2. apple(2)-------animal(2)
(b1_a,b2_a)       (b1_a,b2_a)

3. ace(2)---------animal(2)
(b1_a,b2_a)|      (b1_a,b2_a)
           |-------apple(2)
                   (b1_a,b2_a)

위와 같이 이미 <앞,뒤> 또는 <뒤,앞>에 대해서 쌍이 존해하는지 확인하고 그런 쌍이 없어야만 새로운 쌍을 만들기 때문에 <앞,뒤> 와 <뒤,앞> 이 둘 다 만들어지는 경우가 없습니다. 

이렇게 구성 됐을때 단어 등장횟수 top10을 구하고자하면 Word에서 count top10을 리턴하면됩니다.
연관단어쌍 횟수 top10을 구하고자하면 Word2에서 count top10을 리턴하면됩니다.


=== 요구 사항 설명 ====

1. 사용자로부터 입력받은 검색어로 도서정보 검색 후 데이터를 수집하는 API를 구현한다.

구현한 API는 다음과 같습니다

GET /book/collect

Param:
query

설명:

Kakao API에 책을 query하기 위해서 RestTemplate을 사용하였습니다. 최대한 요청 수를 적게하기 위해 기본적으로 Kakao API에서 한 번에 요청 가능한 최대 size은 50을 사용하는데 1000개의 책 중 남는 책이 50보다 작으면 남은 책 수 만큼의 size로 요청합니다. 책 1000개를 채우지 않거나 Kakao API에서 해당 query에 대한 page가 끝에 도달하지 않았으면 그 다음 page에 대하여 요청을 날리는 루프로 돌립니다. Page 끝에 도달했는데 1000권을 못 채웠으면 "query=자바"로 비슷한 로직으로 또 돌렸습니다.

Kakao API 요청 하나 당 50개씩 끌고 온 책 정보를 루프를 돌면서 각 책 당 bookRepository.existsByIsbn(r.getIsbn()) 식으로 db에 이미 그 책이 존재하는지를 체크하였습니다.
위를 빠르게 하기 위해 isbn 필드를 index로 등록했습니다.

고민1: 각 책당 bookRepository.existsByIsbn(r.getIsbn())했는데 그러면 한 책당 한 select문으로 부르게 되는데 이것보다 효율적인 방법이 있을지 고민입니다.
일단 select로 조회하는 모든 책에 대해서 중복되지 않는 책을 리턴하기 어려울것 같은데, 단체로 saveAll로 하면 더 효율적일지 잘 모르겠습니다. 단체로 saveAll하면 중복인 책은 update가 되고 없는 책은 insert가 될텐데요, update를 위해서 isbn을 아예 primary key로 만들어 버리거나 unique index로 하면 update할때 중복체크를 해줄텐데, 이게 진짜 더 빠를지는 잘 모르겠습니다.

고민2: Kakao API에 50개씩 요청을하니까 각 요청마다 개별 Thread로 만드는게 좋을지 고민입니다. 문제는 각 요청마다 따로 thread를 만들면 db에 추가될때 race condition이 걱정입니다. 그리고 transaction 범위를 클래스 단위로 annotation을 걸어서 race condition을 막으려면 transaction 단위를 아마 thread마다 해야할텐데요, 그러면 어차피 한 요청마다 db에 접근이 lock되어 있으니 그러면 여러 thread로 한 이득이 없지 않나 생각됩니다.

고민3: addBookFromDocument는 한 책 씩 save하는 과정을 하는데요, 이것을 고민1에 얘기한것처럼 아예 조회하는 isbn을 unique index로 하고 모든 책을 save하거나 아니면 bookRepository.existsByIsbn(r.getIsbn())로 거른 책들을 다 모아서 saveAll로 한꺼번에 저장하면 더 좋을것 같습니다.

고민4: addWord는 책과 단어를 파라미터로 받고 그 책의 해당 연관 그룹에 추가, Word 테이블에 추가, 그리고 Word2 테이블에 추가하는 작업을 합니다.
이 경우에 단어들을 묶어서 save를 하려면 한 책의 모든 단어들을 findByWordvalIn(word_list) 형식으로 가져와서 update하는게 좋을것 같긴한데 그렇게 쉽게 끝나진 않을것 같습니다.
저렇게하면 이미 존재하는 단어들을 리턴하겠지만 이미 존재하지 않는 단어들은 새로 추가해줘야하는데 위 쿼리는 findBy에 실패한 단어는 어떤건지 알려주지 않습니다.
DB에 없는 단어를 알기 위해서 위처럼 끌고 온 다음에 for(String w : word_list)로 각 단어마다 해당 set에 존재하는지 찾아봐도 되지만 그렇게 효율적이지 않을 것 같습니다. 왜냐면 set의 key가 단어가 아니라 Word 객체이기 때문입니다.
그런데 위의 비효율성을 감안해도 묶어서 findByWordvalIn(word_list)하는게 이득일지도 모릅니다. 왜냐면 한 책당 단어 숫자가 엄청 많지는 않은데 db에 존재하는 모든 단어는 굉장히 많을수 있기 때문입니다. 그래서 db에서 select하는 경우의 수를 줄이는게 이득일지도 모릅니다.

고민5: 단어가 들어갈 연관그룹을 찾기 위해서 relGroupRepository.findByFirstletterAndBookIdAndFilled(firstLetter,book.getId(),false)를 부릅니다.
이 RelGroup이 찼는지를 위해서 filled라는 필드로 확인을 하고 있는데요, 이 값은 Word 테이블로 유추가 가능한거기 때문에 Boyce-Codd Normal Form에 어긋나는 디자인이긴 합니다.
하지만 각 RelGroup마다 관련 Word를 다 aggregrate해봐야 되기때문에 성능면에서 안 좋을것 같아서 normal form에 어긋나는 방법을 쓰게 되었습니다.
또한, 지금 코드는 filled=false인 그룹을 찾으면 그 그룹에 관련된 단어들이 9개인지를 체크하는데, 그럼 여기서 아예 한단계 더 낳아가서 filled라는 필드가 아니라 그룹에 있는 단어 수로 나타내는게 어떤지도 생각을 해봤습니다. 근데 그러면 normal form에 더더욱 멀어지는거라 그렇게는 않했는데 어떤게 더 좋을지는 생각을 해봐야겠습니다.


2. 두 개의 단어를 입력 받고, 해당 단어들로 연관관계를 가지고 있는 도서의 목록을 출력 한다.

구현한 API는 다음과 같습니다

GET /book/wordpair

Param:
w1 : 단어1
w2 : 단어2

<w1,w2>순서 또는 <w2,w1>순서로 되어있는 쌍을 찾고 그 쌍과 연관된 도서를 리턴했습니다.
<w1,w2>순서란 Word=w1 and Word2=w2인 쌍을 의미합니다.

찾는 순서는 Word에 w1이 존재하는지 체크하고 존재한다면 그 Word의 자식들이 되는 Word2에서 w2가 존재하는지 체크하였습니다.
없다면 <w2,w1>에 대해서 같은 작업을 진행

찾았으면 Word2의 RelGroup들을 가져오고 RelGroup의 Book을 가져왔습니다.


3. 가장 많이 연관 된 단어쌍 TOP10과, 연관관계를 가지고 있는 도서의 목록을 함께 출력 한다.

구현한 API는 다음과 같습니다

GET /book/toprel

Word2에서 count가 가장 많은 top10의 객체들을 가지고 각 word2의 RelGroup을 가져오고 RelGroup의 Book을 가져왔습니다.
여기서 n+1문제를 해결할때 paging issue가 있는데 순전히 join fetch로 하면 limit 10 했을때 Word2 중 10개가 아니라 join한 테이블에서 10개를 끌고 오기 때문에 원하는 결과가 안나옵니다. 그래서 EntityGraph로 이용하면 좋을것 같습니다.


4. 등장 횟수가 가장 많은 단어 TOP10과, 연관 된 단어들의 목록을 등장 횟수와 함께 출력 한다.

구현한 API는 다음과 같습니다

GET /book/topcount

먼저 Word에서 count가 가장 많은 top10의 객체들을 가지고 옵니다.
제가 구현하것은 이 단어와 쌍을 이루는 단어를 다 찾았는데, 다시 보니까 마음에 안듭니다.
이렇게 하면 연관 단어들을 다 찾겠지만 이 방법보다 word와 매칭되는 RelGroup과 매칭되는 word들을 가져오는게 더 낳아보입니다.
EntityGraph로 sub-graph 쓰면 매칭되는 것들에 한해서만 select를 할 수 있을것 같습니다.

5. 도서 제목의 일부분을 입력값으로 조회하면, 해당 도서에서 추출 된 단어들의 목록을 출력한다.

구현한 API는 다음과 같습니다

GET /book/words

Params:
title
type
page 
size

normal과 slice를 분리하기 위해 Filter를 사용해서 분리하였습니다.

bookRepository.findByTitleContaining(title, PageRequest.of(page, size))로 제목 일부분을 이용하면서 page를 신경쓰게 했습니다.

여기서도 n+1문제를 해결할때 paging문제가 있으므로 EntityGraph로 book이랑 RelGroup을 join하는게 좋아보입니다.

고민거리1: 요구사항에서 단어들이 사전순으로 정렬되어야합니다. 처음에는 정렬하는것을 좀 더 효율적으로 하고자 첫 글자 순으로 연관그룹을 먼저 정렬하고 같은 글자의 연관그룹들은 묶고 묶인 연관그룹에서 단어들을 정렬하고 다 모으는 방법을 구현했는데요. 생각해보니까 각 책마다 단어 수가 그렇게 많지는 않아서 오히려 위 처럼 list 복제를 여러번 해야하는 것보다 그냥 한 리스트로 먼저 묶고 통째로 정렬하는게 빠르겠다고 생각했습니다. 


6. 특정 도서에 대한 상세 정보를 출력한다. 

구현한 API는 다음과 같습니다

GET /book

Params:
isbn

bookRepository.findByIsbnContaining(isbn) 으로 간단하게 가져옴.


7. 특정 도서 내에 새로운 단어를 추가할 수 있는 API를 제공한다. 

구현한 API는 다음과 같습니다

POST /book

Params:
isbn
word

도서 수집할때 만든 addWord 함수를 그대로 인용함

8. 특정 도서 내의 단어를 제거할 수 있는 API를 제공한다.

구현한 API는 다음과 같습니다

DELETE /book

Params:
isbn
word

Remove는 단어를 add할때랑 비슷하지만 다른점은 count가 1일때는 아예 객체를 삭제 시켜야된다는 점이다. 객체를 삭제 시킬때 연관된 객체들에서도 삭제하는것을 신경썼다.

